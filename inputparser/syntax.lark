
// Grammar of input files

?start: (_NL)* program (_NL)*

assign: VARIABLE ("," VARIABLE)* ASSIGN assign_right ("," assign_right)*
?assign_right: arithm | dist | categorical | trig

dist: DIST_NAME "(" [arithm ("," arithm)*] ")"

trig: TRIG_NAME "(" VARIABLE ")"

categorical: arithm ("{" arithm "}" arithm)+ ["{" arithm "}"]

condition: atom | NOT "(" condition ")" | condition (AND | OR) condition | "(" condition ")"
atom: arithm COP arithm | TRUE | FALSE

?statem: assign
       | if_statem

if_statem: "if" condition ":" (_NL)+ statems ("elif" condition ":" (_NL)+ statems)* ["else" ":" (_NL)+ statems] "end"
statems: statem ((_NL)+ statem)* (_NL)+

program: [typedefs] initial "while" loop_guard ":" loop_body "end"
initial: [statems]
loop_guard: condition
loop_body: (_NL)+ statems

type: TYPE_NAME "(" [arithm ("," arithm)*] ")"
typedef: VARIABLE ":" type
typedefs: "types" (_NL)* typedef (_NL typedef)* (_NL)* "end" (_NL)*

ASSIGN: "="

TRUE: "true"
FALSE: "false"
AND: "&&"
OR: "||"
NOT: "!"

EQ:  "=="
NEQ: "/="
LE:  "<"
GE:  ">"
LEQ: "<="
GEQ: ">="
COP: LEQ | GEQ | NEQ | EQ | LE | GE

VARIABLE: NAME
TRIG_NAME.2: "Sin" | "Cos"
TYPE_NAME: UCASE_LETTER ("_" | LETTER | DIGIT)*
DIST_NAME: UCASE_LETTER ("_" | LETTER | DIGIT)*

arithm: ARITHM_ATOM
      | BOPEN arithm BCLOSE
      | arithm (PLUS | MINUS | MULT | POW | DIV) arithm
ARITHM_ATOM: ["+" | "-"] (NUMBER | "I" | LCASE_LETTER | "_")+
PLUS: "+"
MINUS: "-"
MULT: "*"
DIV: "/"
POW: "**"
BOPEN: "("
BCLOSE: ")"

%import common.WS_INLINE
%import common.LCASE_LETTER
%import common.UCASE_LETTER
%import common.LETTER
%import common.DIGIT
%import common.CNAME -> NAME
%import common.SH_COMMENT -> COMMENT
%import common.SIGNED_NUMBER
%import common.NUMBER

_NL: (/\r?\n[\t ]*/)+

%ignore WS_INLINE | COMMENT
